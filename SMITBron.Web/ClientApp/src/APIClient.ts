import { ApiBase } from './ApiBase';
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as moment from 'moment';

export class HotelClient extends ApiBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("http://localhost:5700");

    }

    getAllBookings(page: number | undefined, pageSize: number | undefined, showCanceled: boolean | undefined, sortField: string | null | undefined, sortDesc: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<SwaggerResponse<AllBookingsResult>> {
        let url_ = this.baseUrl + "/api/Hotel?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (showCanceled === null)
            throw new Error("The parameter 'showCanceled' cannot be null.");
        else if (showCanceled !== undefined)
            url_ += "showCanceled=" + encodeURIComponent("" + showCanceled) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDesc === null)
            throw new Error("The parameter 'sortDesc' cannot be null.");
        else if (sortDesc !== undefined)
            url_ += "sortDesc=" + encodeURIComponent("" + sortDesc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllBookings(_response);
        });
    }

    protected processGetAllBookings(response: AxiosResponse): Promise<SwaggerResponse<AllBookingsResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AllBookingsResult.fromJS(resultData200);
            return Promise.resolve<SwaggerResponse<AllBookingsResult>>(new SwaggerResponse<AllBookingsResult>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwaggerResponse<AllBookingsResult>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class ApartmentsClient extends ApiBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("http://localhost:5700");

    }

    get(from: moment.Moment | undefined, to: moment.Moment | undefined , cancelToken?: CancelToken | undefined): Promise<SwaggerResponse<HotelApartmentResult[]>> {
        let url_ = this.baseUrl + "/api/Apartments?";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toISOString() : "") + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<SwaggerResponse<HotelApartmentResult[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HotelApartmentResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SwaggerResponse<HotelApartmentResult[]>>(new SwaggerResponse<HotelApartmentResult[]>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwaggerResponse<HotelApartmentResult[]>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class BookingClient extends ApiBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("http://localhost:5700");

    }

    post(model: NewBookingModel , cancelToken?: CancelToken | undefined): Promise<SwaggerResponse<FileResponse>> {
        let url_ = this.baseUrl + "/api/Booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: AxiosResponse): Promise<SwaggerResponse<FileResponse>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, { fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    cancel(model: CancelBookingModel , cancelToken?: CancelToken | undefined): Promise<SwaggerResponse<FileResponse>> {
        let url_ = this.baseUrl + "/api/Booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: AxiosResponse): Promise<SwaggerResponse<FileResponse>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, { fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class AllBookingsResult implements IAllBookingsResult {
    totalCount?: number;
    bookings?: Booking[];

    constructor(data?: IAllBookingsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["bookings"])) {
                this.bookings = [] as any;
                for (let item of _data["bookings"])
                    this.bookings!.push(Booking.fromJS(item));
            }
            else {
                this.bookings = <any>null;
            }
        }
    }

    static fromJS(data: any): AllBookingsResult {
        data = typeof data === 'object' ? data : {};
        let result = new AllBookingsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.bookings)) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAllBookingsResult {
    totalCount?: number;
    bookings?: Booking[];
}

export class Booking implements IBooking {
    id?: string;
    userId?: string;
    startDate?: moment.Moment;
    endDate?: moment.Moment;
    userEmail?: string;
    userIdCode?: string;
    userFirstname?: string;
    userLastname?: string;
    cancelDate?: moment.Moment | null;
    apartmentNumber?: number;
    apartmentId?: string;
    apartmentPrice?: number;
    totalPrice?: number;

    constructor(data?: IBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.startDate = _data["startDate"] ? moment(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? moment(_data["endDate"].toString()) : <any>null;
            this.userEmail = _data["userEmail"] !== undefined ? _data["userEmail"] : <any>null;
            this.userIdCode = _data["userIdCode"] !== undefined ? _data["userIdCode"] : <any>null;
            this.userFirstname = _data["userFirstname"] !== undefined ? _data["userFirstname"] : <any>null;
            this.userLastname = _data["userLastname"] !== undefined ? _data["userLastname"] : <any>null;
            this.cancelDate = _data["cancelDate"] ? moment(_data["cancelDate"].toString()) : <any>null;
            this.apartmentNumber = _data["apartmentNumber"] !== undefined ? _data["apartmentNumber"] : <any>null;
            this.apartmentId = _data["apartmentId"] !== undefined ? _data["apartmentId"] : <any>null;
            this.apartmentPrice = _data["apartmentPrice"] !== undefined ? _data["apartmentPrice"] : <any>null;
            this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
        }
    }

    static fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["userEmail"] = this.userEmail !== undefined ? this.userEmail : <any>null;
        data["userIdCode"] = this.userIdCode !== undefined ? this.userIdCode : <any>null;
        data["userFirstname"] = this.userFirstname !== undefined ? this.userFirstname : <any>null;
        data["userLastname"] = this.userLastname !== undefined ? this.userLastname : <any>null;
        data["cancelDate"] = this.cancelDate ? this.cancelDate.toISOString() : <any>null;
        data["apartmentNumber"] = this.apartmentNumber !== undefined ? this.apartmentNumber : <any>null;
        data["apartmentId"] = this.apartmentId !== undefined ? this.apartmentId : <any>null;
        data["apartmentPrice"] = this.apartmentPrice !== undefined ? this.apartmentPrice : <any>null;
        data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
        return data;
    }
}

export interface IBooking {
    id?: string;
    userId?: string;
    startDate?: moment.Moment;
    endDate?: moment.Moment;
    userEmail?: string;
    userIdCode?: string;
    userFirstname?: string;
    userLastname?: string;
    cancelDate?: moment.Moment | null;
    apartmentNumber?: number;
    apartmentId?: string;
    apartmentPrice?: number;
    totalPrice?: number;
}

export class HotelApartmentResult implements IHotelApartmentResult {
    id?: string;
    numberOfRooms?: number;
    numberOfBeds?: number;
    price?: number;

    constructor(data?: IHotelApartmentResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.numberOfRooms = _data["numberOfRooms"] !== undefined ? _data["numberOfRooms"] : <any>null;
            this.numberOfBeds = _data["numberOfBeds"] !== undefined ? _data["numberOfBeds"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): HotelApartmentResult {
        data = typeof data === 'object' ? data : {};
        let result = new HotelApartmentResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["numberOfRooms"] = this.numberOfRooms !== undefined ? this.numberOfRooms : <any>null;
        data["numberOfBeds"] = this.numberOfBeds !== undefined ? this.numberOfBeds : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface IHotelApartmentResult {
    id?: string;
    numberOfRooms?: number;
    numberOfBeds?: number;
    price?: number;
}

export class NewBookingModel implements INewBookingModel {
    firstname?: string | null;
    lastname?: string | null;
    email?: string | null;
    idCode?: string | null;
    apartmentId?: string;
    startDate?: moment.Moment;
    endDate?: moment.Moment;

    constructor(data?: INewBookingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstname = _data["firstname"] !== undefined ? _data["firstname"] : <any>null;
            this.lastname = _data["lastname"] !== undefined ? _data["lastname"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.idCode = _data["idCode"] !== undefined ? _data["idCode"] : <any>null;
            this.apartmentId = _data["apartmentId"] !== undefined ? _data["apartmentId"] : <any>null;
            this.startDate = _data["startDate"] ? moment(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? moment(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): NewBookingModel {
        data = typeof data === 'object' ? data : {};
        let result = new NewBookingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["lastname"] = this.lastname !== undefined ? this.lastname : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["idCode"] = this.idCode !== undefined ? this.idCode : <any>null;
        data["apartmentId"] = this.apartmentId !== undefined ? this.apartmentId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export interface INewBookingModel {
    firstname?: string | null;
    lastname?: string | null;
    email?: string | null;
    idCode?: string | null;
    apartmentId?: string;
    startDate?: moment.Moment;
    endDate?: moment.Moment;
}

export class CancelBookingModel implements ICancelBookingModel {
    bookingId?: string;
    email?: string | null;
    idCode?: string | null;

    constructor(data?: ICancelBookingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookingId = _data["bookingId"] !== undefined ? _data["bookingId"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.idCode = _data["idCode"] !== undefined ? _data["idCode"] : <any>null;
        }
    }

    static fromJS(data: any): CancelBookingModel {
        data = typeof data === 'object' ? data : {};
        let result = new CancelBookingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["idCode"] = this.idCode !== undefined ? this.idCode : <any>null;
        return data;
    }
}

export interface ICancelBookingModel {
    bookingId?: string;
    email?: string | null;
    idCode?: string | null;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}